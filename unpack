#!/bin/bash

#  This executable takes any number of .pak files as arguments and unpacks them
#  to their respective .../Starbound/mods/<container> directory. It attempts to
#  rename the container to the "friendlyName" found in the /_metadata JSON file.
#  USAGE: unpack -rR .../**/*pak
#    -R   overwrite directories without asking
#    -r   ask before overwriting any directory
#         default, never overwrite directories
#    -   unpack container/mod.pak    |    unpack one .pak or .modpak file
#    -   unpack container/*pak       |    glob all .pak files in a folder
#    -   unpack container/**/*pak    |    recursively glob all .pak files

starbound="$HOME/Library/Application Support/Steam/steamapps/common/Starbound"
flags=()

while getopts 'rRh' opt; do
    case "$opt" in
        r) flags+=("interactive");;
        R) flags+=("overwrite");;
        h) echo "USAGE:"
           echo " - unpack container/mod.pak  |  unpack one .pak or .modpak file"
           echo " - unpack container/*pak     |  unpack all .pak files in folder"
           echo " - unpack container/**/*pak  |  unpacks every .pak file in path"
           echo " - unpack container          |  means 4.0 **/*pak or 3.0 */pak";;
        ?);;
    esac
done

unpak () {
    for pak in "$@"; do
        if [[ "$pak" = *"*"* ]]; then return 1; fi # ../**/*pak fail, try ../*pak

        default_container="$(basename "$(dirname "$pak")")-$(basename "$pak")"
        default_container="${default_container%.*pak}"

        "$starbound"/osx/asset_unpacker "$pak" "$starbound/mods/$default_container"


        modname="$(grep -F friendlyName "$starbound/mods/$default_container"/_metadata)"
        if [ -z "$modname" ]; then continue; fi

        modname="${modname%\"*}"         # short-strip tailing quote
        modname="${modname##*\"}"        #  long-strip leading quote


        new_container="$modname"; i=0

        echo "$default_container -> $new_container"

        while [ -d "$starbound/mods/$new_container" ]; do

            if [[ "${flags[@]}" =~ "interactive" ]]; then
                read -n1 -p "Overwrite directory? (y/n) " line
                if [[ $line = [yY] ]]; then echo;
                    rm -rf "$starbound/mods/$new_container"; break
                fi; echo

            elif [[ "${flags[@]}" =~ "overwrite" ]]; then
                rm -rf "$starbound/mods/$new_container"; break
            fi

            let i+=1
            new_container="$modname ($i)"
            echo "$default_container -> $new_container"
        done

        mv "$starbound/mods/$default_container" "$starbound/mods/$new_container"
    done
}

for arg in "$@"; do
    if [ -d "$arg" ]; then
        unpak "$arg"/**/*.*pak || unpak "$arg"/*.*pak
    elif [[ "$arg" = *.*pak ]]; then
        unpak "$arg"
    fi
done
